{"ast":null,"code":"/**\n * Model for redux actions with pagination\n */\n\n/**\n * Useful types for working with actions\n */\n\n/**\n * Check if the async action type is rejected\n */\nexport function isRejectedAction(action) {\n  return action.type.endsWith('/rejected');\n}\n\n/**\n * Check if the async action type is pending\n */\nexport function isPendingAction(action) {\n  return action.type.endsWith('/pending');\n}\n\n/**\n * Check if the async action type is completed\n */\nexport function isFulfilledAction(action) {\n  return action.type.endsWith('/fulfilled');\n}\n\n/**\n * serialize function used for async action errors,\n * since the default function from Redux Toolkit strips useful info from axios errors\n */\n// export const serializeAxiosError = (value: any): AxiosError | SerializedError => {\n//   if (typeof value === 'object' && value !== null) {\n//     if (value.isAxiosError) {\n//       return value;\n//     } else {\n//       const simpleError: SerializedError = {};\n//       for (const property of commonErrorProperties) {\n//         if (typeof value[property] === 'string') {\n//           simpleError[property] = value[property];\n//         }\n//       }\n\n//       return simpleError;\n//     }\n//   }\n//   return { message: String(value) };\n// };\n\n// /**\n//  * A wrapper on top of createSlice from Redux Toolkit to extract\n//  * common reducers and matchers used by entities\n//  */\n// export const createEntitySlice = <T, Reducers extends SliceCaseReducers<EntityState<T>>>({\n//   name = '',\n//   initialState,\n//   reducers,\n//   extraReducers,\n//   skipRejectionHandling,\n// }: {\n//   name: string;\n//   initialState: EntityState<T>;\n//   reducers?: ValidateSliceCaseReducers<EntityState<T>, Reducers>;\n//   extraReducers?: (builder: ActionReducerMapBuilder<EntityState<T>>) => void;\n//   skipRejectionHandling?: boolean;\n// }) => {\n//   return createSlice({\n//     name,\n//     initialState,\n//     reducers: {\n//       /**\n//        * Reset the entity state to initial state\n//        */\n//       reset() {\n//         return initialState;\n//       },\n//       ...reducers,\n//     },\n//     extraReducers(builder) {\n//       extraReducers(builder);\n//       /*\n//        * Common rejection logic is handled here.\n//        * If you want to add your own rejcetion logic, pass `skipRejectionHandling: true`\n//        * while calling `createEntitySlice`\n//        * */\n//       if (!skipRejectionHandling) {\n//         builder.addMatcher(isRejectedAction, (state, action) => {\n//           state.loading = false;\n//           state.updating = false;\n//           state.updateSuccess = false;\n//           state.errorMessage = action.error.message;\n//         });\n//       }\n//     },\n//   });\n// };","map":{"version":3,"names":["isRejectedAction","action","type","endsWith","isPendingAction","isFulfilledAction"],"sources":["C:/Users/Acer/OneDrive/Máy tính/minhanh/react-springboot-qlsinhvien-master/ql-sinh-vien/src/shared/utils/reducer.utils.ts"],"sourcesContent":["import {\n  AnyAction,\n  AsyncThunk,\n  ActionReducerMapBuilder,\n  createSlice,\n  SerializedError,\n  SliceCaseReducers,\n  ValidateSliceCaseReducers,\n} from '@reduxjs/toolkit';\nimport { AxiosError } from 'axios';\n\n/**\n * Model for redux actions with pagination\n */\nexport type IQueryParams = { query?: string; page?: number; size?: number; sort?: string };\n\n/**\n * Useful types for working with actions\n */\ntype GenericAsyncThunk = AsyncThunk<unknown, unknown, any>;\nexport type PendingAction = ReturnType<GenericAsyncThunk['pending']>;\nexport type RejectedAction = ReturnType<GenericAsyncThunk['rejected']>;\nexport type FulfilledAction = ReturnType<GenericAsyncThunk['fulfilled']>;\n\n/**\n * Check if the async action type is rejected\n */\nexport function isRejectedAction(action: AnyAction) {\n  return action.type.endsWith('/rejected');\n}\n\n/**\n * Check if the async action type is pending\n */\nexport function isPendingAction(action: AnyAction) {\n  return action.type.endsWith('/pending');\n}\n\n/**\n * Check if the async action type is completed\n */\nexport function isFulfilledAction(action: AnyAction) {\n  return action.type.endsWith('/fulfilled');\n}\n\n\n/**\n * serialize function used for async action errors,\n * since the default function from Redux Toolkit strips useful info from axios errors\n */\n// export const serializeAxiosError = (value: any): AxiosError | SerializedError => {\n//   if (typeof value === 'object' && value !== null) {\n//     if (value.isAxiosError) {\n//       return value;\n//     } else {\n//       const simpleError: SerializedError = {};\n//       for (const property of commonErrorProperties) {\n//         if (typeof value[property] === 'string') {\n//           simpleError[property] = value[property];\n//         }\n//       }\n\n//       return simpleError;\n//     }\n//   }\n//   return { message: String(value) };\n// };\n\nexport interface EntityState<T> {\n  loading: boolean;\n  errorMessage: string | null;\n  entities: ReadonlyArray<T>;\n  entity: T;\n  links?: any;\n  updating: boolean;\n  totalItems?: number;\n  updateSuccess: boolean;\n}\n\n// /**\n//  * A wrapper on top of createSlice from Redux Toolkit to extract\n//  * common reducers and matchers used by entities\n//  */\n// export const createEntitySlice = <T, Reducers extends SliceCaseReducers<EntityState<T>>>({\n//   name = '',\n//   initialState,\n//   reducers,\n//   extraReducers,\n//   skipRejectionHandling,\n// }: {\n//   name: string;\n//   initialState: EntityState<T>;\n//   reducers?: ValidateSliceCaseReducers<EntityState<T>, Reducers>;\n//   extraReducers?: (builder: ActionReducerMapBuilder<EntityState<T>>) => void;\n//   skipRejectionHandling?: boolean;\n// }) => {\n//   return createSlice({\n//     name,\n//     initialState,\n//     reducers: {\n//       /**\n//        * Reset the entity state to initial state\n//        */\n//       reset() {\n//         return initialState;\n//       },\n//       ...reducers,\n//     },\n//     extraReducers(builder) {\n//       extraReducers(builder);\n//       /*\n//        * Common rejection logic is handled here.\n//        * If you want to add your own rejcetion logic, pass `skipRejectionHandling: true`\n//        * while calling `createEntitySlice`\n//        * */\n//       if (!skipRejectionHandling) {\n//         builder.addMatcher(isRejectedAction, (state, action) => {\n//           state.loading = false;\n//           state.updating = false;\n//           state.updateSuccess = false;\n//           state.errorMessage = action.error.message;\n//         });\n//       }\n//     },\n//   });\n// };\n"],"mappings":"AAWA;AACA;AACA;;AAGA;AACA;AACA;;AAMA;AACA;AACA;AACA,OAAO,SAASA,gBAAgB,CAACC,MAAiB,EAAE;EAClD,OAAOA,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,WAAW,CAAC;AAC1C;;AAEA;AACA;AACA;AACA,OAAO,SAASC,eAAe,CAACH,MAAiB,EAAE;EACjD,OAAOA,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC;AACzC;;AAEA;AACA;AACA;AACA,OAAO,SAASE,iBAAiB,CAACJ,MAAiB,EAAE;EACnD,OAAOA,MAAM,CAACC,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC;AAC3C;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}